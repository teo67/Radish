	# Radish implementation of the stack data structure #
	

	dig Node plant class {
	    dig next
	    dig val
	    constructor plant tool(_next, _val) {
	        this.next plant _next
	        this.val plant _val
	    }
	}
	

	dig Stack plant class {
	    dig private head
	    constructor plant tool() {
	        this.head plant null
	    }
	    dig length {
	        harvest {
	            dig current plant this.head
	            dig len plant 0
	            while(current != null) {
	                len++
	                current plant current.next
	            }
	            harvest len
	        }
	    }
	    dig push plant tool(val) {
	        this.head plant new Node(this.head, val)
	        harvest val
	    }
	    dig pop plant tool() {
	        if(this.head = null) {
	            throw "Cannot pop an empty stack!"
	        }
	        dig saved plant this.head.val
	        this.head plant this.head.next
	        harvest saved
	    }
	    dig peek plant tool() {
	        if(this.head = null) {
	            throw "Cannot peek an empty stack!"
	        }
	        harvest this.head.val
	    }
	}
	

	dig stack plant new Stack()
	stack.push(5)
	stack.push(7)
	holler(stack.peek())
	holler(stack.length)
	holler(stack.pop())
	holler(stack.pop())
	# output: 7
	2
	7
	5 #