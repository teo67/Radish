# declare a function #
dig myFunction plant tool(a) {
    holler("running the function for " + a)
}

# anatomy #
tool # <- function indicator # (a # parameter #, b # parameter #) # <- parameter list # {
    # function body#
}

# call a function #
myFunction("test123") # parameters go in between the parentheses #

# return a value from a function #
dig add plant tool(a, b) {
    harvest a + b
}
holler(add(2, 3)) # add(2, 3) returns 5, so 5 is printed #

# end a function without returning a value #
dig divide plant tool(e, f) {
    if f = 0 {
        holler("whoa there")
        end # nothing is harvested, but the function still ends#
    }
    harvest e / f
}
divide(1, 0) # whoa there #

# shorthand #
t(#...#) {#...#} # may be used instead of # tool(#...#) {#...#}
# h may be used instead of harvest: # tool() { h 123 }
# if a function has no parameters, the parentheses may be omitted like so: # tool {#...#}
# if a function only contains one statement AND should return the output of that statement, brackets may be omitted: #
t(a, b) a + b # <- this function is equivalent to the add function declared on line 15 #